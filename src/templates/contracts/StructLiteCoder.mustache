pragma solidity 0.4.24;


library {{ name.Plural }}Coder {
    ////
    // Variable Declarations
    ////
    {{#each variables}}
    {{#unless @first}}

    {{/unless}}
    // As a {{ type }}, "{{ name.lowerCamelCase }}" will use {{ byte_length }} bytes.
    {{#unless isFirst}}
    uint256 internal constant {{ ../name.CONSTANT }}_{{ name.CONSTANT }}_OFFSET = {{ offset }};
    {{/unless}}
    uint256 internal constant {{ ../name.CONSTANT }}_{{ name.CONSTANT }}_MASK = {{ mask }};
    uint256 internal constant {{ ../name.CONSTANT }}_{{ name.CONSTANT }}_NEGATIVE_MASK = {{ negative_mask }};
    {{/each}}

    ////
    // Decoders
    ////
    {{#each variables}}
    {{#unless @first}}

    {{/unless}}
    function decode{{ ../name.UpperCamelCase }}{{ name.UpperCamelCase }}(bytes32{{#if ../slotsArray}}[{{ ../slotsLength }}]{{/if}} _{{ ../name.lowerCamelCase }}) public pure returns({{ type }}) {
    {{#if isBool}}
        return (uint256(_{{ ../name.lowerCamelCase }}{{#if ../slotsArray}}[{{ slot }}]{{/if}}) & {{ ../name.CONSTANT }}_{{ name.CONSTANT }}_MASK) != 0x0;
        {{else}}
        return {{type}}((uint256(_{{ ../name.lowerCamelCase }}{{#if ../slotsArray}}[{{ slot }}]{{/if}}) & {{ ../name.CONSTANT }}_{{ name.CONSTANT }}_MASK){{#unless isFirst}} / {{ ../name.CONSTANT }}_{{ name.CONSTANT }}_OFFSET{{/unless}});
        {{/if}}
    }
    {{/each}}

    ////
    // Encoders
    ////
    {{#each variables}}
    {{#unless @first}}

    {{/unless}}
    function encode{{ ../name.UpperCamelCase }}{{ name.UpperCamelCase }}(bytes32{{#if ../slotsArray}}[{{ ../slotsLength }}]{{/if}} _{{ ../name.lowerCamelCase }}, {{ type }} _{{ name.lowerCamelCase }}) public pure returns(bytes32{{#if ../slotsArray}}[{{ ../slotsLength }}]{{/if}}) {
        {{#if isBool}}
        if (_{{ name.lowerCamelCase }}) {
            _{{ ../name.lowerCamelCase }}{{#if ../slotsArray}}[{{ slot }}]{{/if}} = bytes32(
                (uint256(_{{ ../name.lowerCamelCase }}{{#if ../slotsArray}}[{{ slot }}]{{/if}}) & {{ ../name.CONSTANT }}_{{ name.CONSTANT }}_NEGATIVE_MASK) | {{ ../name.CONSTANT }}_{{ name.CONSTANT }}_MASK
            );
        } else {
            _{{ ../name.lowerCamelCase }}{{#if ../slotsArray}}[{{ slot }}]{{/if}} = bytes32(uint256(_{{ ../name.lowerCamelCase }}{{#if ../slotsArray}}[{{ slot }}]{{/if}}) & {{ ../name.CONSTANT }}_{{ name.CONSTANT }}_NEGATIVE_MASK);
        }
        {{else}}
        _{{ ../name.lowerCamelCase }}{{#if ../slotsArray}}[{{ slot }}]{{/if}} = bytes32(
            (uint256(_{{ ../name.lowerCamelCase }}{{#if ../slotsArray}}[{{ slot }}]{{/if}}) & {{ ../name.CONSTANT }}_{{ name.CONSTANT }}_NEGATIVE_MASK) |
            ((uint256(_{{ name.lowerCamelCase }}){{#unless isFirst}} * {{ ../name.CONSTANT }}_{{ name.CONSTANT }}_OFFSET{{/unless}}) & {{ ../name.CONSTANT }}_{{ name.CONSTANT }}_MASK)
        );
        {{/if}}
        return _{{ ../name.lowerCamelCase }};
    }
    {{/each}}

    function encode{{ name.UpperCamelCase }}(
        {{#each variables}}
        {{ type }} _{{ name.lowerCamelCase }}{{#unless @last}},{{/unless}}
        {{/each}}
    ) public pure returns(bytes32{{#if slotsArray}}[{{ slotsLength }}]{{/if}} _{{ name.lowerCamelCase }}) {
        {{#each slots}}
        _{{ ../name.lowerCamelCase }}{{#if ../slotsArray}}[{{ @index }}]{{/if}} = encode{{ ../name.UpperCamelCase }}DataSlot{{ @index }}(
            {{#each this}}
            _{{ name.lowerCamelCase }}{{#unless @last}},{{/unless}}
            {{/each}}
        );
        {{/each}}
    }

    {{#each slots}}
    {{#unless @first}}

    {{/unless}}
    function encode{{ ../name.UpperCamelCase }}DataSlot{{ @index }}(
        {{#each this}}
        {{ type }} _{{ name.lowerCamelCase }}{{#unless @last}},{{/unless}}
        {{/each}}
    ) internal pure returns(bytes32) {
        {{#each this}}
        {{#if isBool}}
        uint256 standard{{ name.UpperCamelCase }} = (_{{ name.lowerCamelCase }} ? {{ ../../name.CONSTANT }}_{{ name.CONSTANT }}_MASK : {{ ../../name.CONSTANT }}_{{ name.CONSTANT }}_NEGATIVE_MASK);
        {{else}}
        uint256 standard{{ name.UpperCamelCase }} = uint256(_{{ name.lowerCamelCase }});
        {{/if}}
        {{/each}}
        return bytes32(
            {{#each this}}
            ((standard{{ name.UpperCamelCase }}{{#unless isFirst}} * {{ ../../name.CONSTANT }}_{{ name.CONSTANT }}_OFFSET{{/unless}}) & {{ ../../name.CONSTANT }}_{{ name.CONSTANT }}_MASK){{#unless @last}} |{{/unless}}
            {{/each}}
        );
    }
    {{/each}}
}
