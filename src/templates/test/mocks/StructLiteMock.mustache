pragma solidity 0.4.24;

////
// This Mock provides a simi
////
library {{ name.Plural }}Original {
    struct {{ name.UpperCamelCase }} {
        {{#each variables}}
        {{ type }} {{ name.lowerCamelCase }};
        {{/each}}
    }

    ////
    // Getters
    ////
    {{#each variables}}
    {{#unless @first}}

    {{/unless}}
    function get{{ ../name.UpperCamelCase }}{{ name.UpperCamelCase }}({{ ../name.UpperCamelCase }} storage _{{ ../name.lowerCamelCase }}) internal view returns({{ type }}) {
        return _{{ ../name.lowerCamelCase }}.{{ name.lowerCamelCase }};
    }
    {{/each}}

    function get{{ name.UpperCamelCase }}({{ name.UpperCamelCase }} storage _{{ name.lowerCamelCase }}) internal view returns(
        {{#each variables}}
        {{ type }} {{ name.lowerCamelCase }}{{#unless @last}},{{/unless}}
        {{/each}}
    ) {
        {{#each variables}}
        {{ name.lowerCamelCase }} = _{{ ../name.lowerCamelCase }}.{{ name.lowerCamelCase }};
        {{/each}}
    }

    ////
    // Setters
    ////
    {{#each variables}}
    {{#unless @first}}

    {{/unless}}
    function set{{ ../name.UpperCamelCase }}{{ name.UpperCamelCase }}({{ ../name.UpperCamelCase }} storage _{{ ../name.lowerCamelCase }}, {{ type }} _{{ name.lowerCamelCase }}) internal {
        _{{ ../name.lowerCamelCase }}.{{ name.lowerCamelCase }} = _{{ name.lowerCamelCase }};
    }
    {{/each}}

    function set{{ name.UpperCamelCase }}(
        {{ name.UpperCamelCase }} storage _{{ name.lowerCamelCase }},
        {{#each variables}}
        {{ type }} _{{ name.lowerCamelCase }}{{#unless @last}},{{/unless}}
        {{/each}}
    ) internal {
        {{#each variables}}
        _{{ ../name.lowerCamelCase }}.{{ name.lowerCamelCase }} = _{{ name.lowerCamelCase }};
        {{/each}}
    }
}
