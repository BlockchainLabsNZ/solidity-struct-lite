pragma solidity 0.4.24;


contract {{ name.Plural }}MockSingleStructScenario {
    struct {{ name.UpperCamelCaseÂ }} {
        {{#each variables}}
        {{ type }} {{ name.lowerCamelCase }};
        {{/each}}
    }

    {{ name.UpperCamelCase }} public {{ name.lowerCamelCase }};

    function write{{ name.UpperCamelCase }}(
        {{#each variables}}
        {{ type }} _{{ name.lowerCamelCase }}{{#unless @last}},{{/unless}}
        {{/each}}
    ) public {
        {{#each variables}}
        {{ ../name.lowerCamelCase }}.{{ name.lowerCamelCase }} = _{{ name.lowerCamelCase }};
        {{/each}}
    }

    {{#each variables}}
    function write{{ ../name.UpperCamelCase }}{{ name.UpperCamelCase }}(
        {{ type }} _{{ name.lowerCamelCase }}
    ) public {
        {{ ../name.lowerCamelCase }}.{{ name.lowerCamelCase }} = _{{ name.lowerCamelCase }};
    }
    {{/each}}

    function read{{ name.UpperCamelCase }}() public view returns(
        {{#each variables}}
        {{ type }}{{#unless @last}},{{/unless}}
        {{/each}}
    ) {
        return (
            {{#each variables}}
            {{ ../name.lowerCamelCase }}.{{ name.lowerCamelCase }}{{#unless @last}},{{/unless}}
            {{/each}}
        );
    }

    {{#each variables}}
    function read{{ ../name.UpperCamelCase }}{{ name.UpperCamelCase }}() public view returns({{ type }}) {
        return {{ ../name.lowerCamelCase }}.{{ name.lowerCamelCase }};
    }
    {{/each}}
}
