pragma solidity 0.4.24;


contract {{ name.Plural }}MockStructArrayScenario {
    struct {{ name.UpperCamelCaseÂ }} {
        {{#each variables}}
        {{ type }} {{ name.lowerCamelCase }};
        {{/each}}
    }

    {{ name.UpperCamelCase }}[] public {{ name.lowerCamelCase }};

    function write{{ name.UpperCamelCase }}(
        uint256 _index,
        {{#each variables}}
        {{ type }} _{{ name.lowerCamelCase }}{{#unless @last}},{{/unless}}
        {{/each}}
    ) public {
        if ({{ name.lowerCamelCase }}.length <= _index){
            {{ name.lowerCamelCase }}.length = _index + 1;
        }
        {{#each variables}}
        {{ ../name.lowerCamelCase }}[_index].{{ name.lowerCamelCase }} = _{{ name.lowerCamelCase }};
        {{/each}}
    }

    {{#each variables}}
    function write{{ ../name.UpperCamelCase }}{{ name.UpperCamelCase }}(
        uint256 _index,
        {{ type }} _{{ name.lowerCamelCase }}
    ) public {
        if ({{ ../name.lowerCamelCase }}.length <= _index){
            {{ ../name.lowerCamelCase }}.length = _index + 1;
        }
        {{ ../name.lowerCamelCase }}[_index].{{ name.lowerCamelCase }} = _{{ name.lowerCamelCase }};
    }
    {{/each}}

    function read{{ name.UpperCamelCase }}(uint256 _index) public view returns(
        {{#each variables}}
        {{ type }}{{#unless @last}},{{/unless}}
        {{/each}}
    ) {
        return (
            {{#each variables}}
            {{ ../name.lowerCamelCase }}[_index].{{ name.lowerCamelCase }}{{#unless @last}},{{/unless}}
            {{/each}}
        );
    }

    {{#each variables}}
    function read{{ ../name.UpperCamelCase }}{{ name.UpperCamelCase }}(uint256 _index) public view returns({{ type }}) {
        return {{ ../name.lowerCamelCase }}[_index].{{ name.lowerCamelCase }};
    }
    {{/each}}
}
