const comparator = require("./utils/comparator");
const constants = require("./utils/constants");

const {{ name.Plural }}Coder = artifacts.require("{{ name.Plural }}Coder");
const {{ name.Plural }}FunctionParametersScenario = artifacts.require("{{ name.Plural }}FunctionParametersScenario");

contract("{{ name.Plural }}FunctionParametersScenario", () => {
  it("Should recieve a bytes32[] as an argument", async () => {
    let {{ name.plural }}Coder = await {{ name.Plural }}Coder.deployed();
    let {{ name.plural }}FunctionParametersScenario = await {{ name.Plural }}FunctionParametersScenario.deployed();

    {{#each variables}}
    let {{ ../name.lowerCamelCase }}{{ name.UpperCamelCase }};
    {{/each}}

    [
      {{#each variables}}
      {{ ../name.lowerCamelCase }}{{ name.UpperCamelCase }}{{#unless @last}},{{/unless}}
      {{/each}}
    ] = await {{ name.plural }}FunctionParametersScenario.singleStruct.call(
      await {{ name.plural }}Coder.encode{{ name.UpperCamelCase }}.call(
        {{#each variables}}
        constants["{{ type }}"]{{#unless @last}},{{/unless}}
        {{/each}}
      )
    );

    {{#each variables}}
    assert.isTrue(comparator("{{ type }}", {{ ../name.lowerCamelCase }}{{ name.UpperCamelCase }}, constants["{{ type }}"]));
    {{/each}}
  });

  it("Should recieve a bytes32[][] with a fixed length of 10 as an argument", async () => {
    let {{ name.plural }}Coder = await {{ name.Plural }}Coder.deployed();
    let {{ name.plural }}FunctionParametersScenario = await {{ name.Plural }}FunctionParametersScenario.deployed();

    {{#each variables}}
    let {{ ../name.lowerCamelCase }}{{ name.UpperCamelCase }};
    {{/each}}
    let data = await {{ name.plural }}Coder.encode{{ name.UpperCamelCase }}.call(
      {{#each variables}}
      constants["{{ type }}"]{{#unless @last}},{{/unless}}
      {{/each}}
    );
    [
      {{#each variables}}
      {{ ../name.lowerCamelCase }}{{ name.UpperCamelCase }}{{#unless @last}},{{/unless}}
      {{/each}}
    ] = await {{ name.plural }}FunctionParametersScenario.knownLengthStructArray.call(
      [data, data, data, data, data, data, data, data, data, data]
    );

    {{#each variables}}
    assert.isTrue(comparator("{{ type }}", {{ ../name.lowerCamelCase }}{{ name.UpperCamelCase }}, constants["{{ type }}"]));
    {{/each}}
  });

  it("Should recieve a bytes32[] with an unknown length as an argument", async () => {
    let {{ name.plural }}Coder = await {{ name.Plural }}Coder.deployed();
    let {{ name.plural }}FunctionParametersScenario = await {{ name.Plural }}FunctionParametersScenario.deployed();

    {{#each variables}}
    let {{ ../name.lowerCamelCase }}{{ name.UpperCamelCase }};
    {{/each}}
    let data = await {{ name.plural }}Coder.encode{{ name.UpperCamelCase }}.call(
      {{#each variables}}
      constants["{{ type }}"]{{#unless @last}},{{/unless}}
      {{/each}}
    );
    [
      {{#each variables}}
      {{ ../name.lowerCamelCase }}{{ name.UpperCamelCase }}{{#unless @last}},{{/unless}}
      {{/each}}
    ] = await {{ name.plural }}FunctionParametersScenario.unknownLengthStructArray.call(
      {{#each slots}}
      [data{{#if ../slotsArray}}[{{@index}}]{{/if}}]{{#unless @last}},{{/unless}}
      {{/each}}
    );

    {{#each variables}}
    assert.isTrue(comparator("{{ type }}", {{ ../name.lowerCamelCase }}{{ name.UpperCamelCase }}, constants["{{ type }}"]));
    {{/each}}
  });
});
