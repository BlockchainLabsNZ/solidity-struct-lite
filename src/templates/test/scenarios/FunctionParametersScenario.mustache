pragma solidity 0.4.24;

import "../../contracts/{{ name.Plural }}Coder.sol";


contract {{ name.Plural }}FunctionParametersScenario {
    function singleStruct(bytes32[{{ slotsLength }}] _{{ name.lowerCamelCase }}Data) public pure returns(
        {{#each variables}}
        {{ type }} {{ name.lowerCamelCase }}{{#unless @last}},{{/unless}}
        {{/each}}
    ) {
        bytes32[{{ slotsLength }}] memory _{{ name.lowerCamelCase }};
        _{{ name.lowerCamelCase }} = _{{ name.lowerCamelCase }}Data;
        {{#each variables}}
        {{ name.lowerCamelCase }} = {{ ../name.Plural }}Coder.decode{{ ../name.UpperCamelCase }}{{ name.UpperCamelCase }}(_{{ ../name.lowerCamelCase }});
        {{/each}}
    }

    function knownLengthStructArray(bytes32[{{ slotsLength }}][10] _{{ name.lowerCamelCase }}Data) public pure returns(
        {{#each variables}}
        {{ type }} {{ name.lowerCamelCase }}{{#unless @last}},{{/unless}}
        {{/each}}
    ) {
        bytes32[{{ slotsLength }}][10] memory _{{ name.plural }};
        for (uint i = 0; i < _{{ name.lowerCamelCase }}Data.length; i++) {
            _{{ name.plural }}[i] = _{{ name.lowerCamelCase }}Data[i];
        }
        {{#each variables}}
        {{ name.lowerCamelCase }} = {{ ../name.Plural }}Coder.decode{{ ../name.UpperCamelCase }}{{ name.UpperCamelCase }}(_{{ ../name.plural }}[0]);
        {{/each}}
    }

    function unknownLengthStructArray(
        {{#each slots}}
        bytes32[] _{{ ../name.lowerCamelCase }}DataSlot{{ @index }}{{#unless @last}},{{/unless}}
        {{/each}}
    ) public returns(
        {{#each variables}}
        {{ type }} {{ name.lowerCamelCase }}{{#unless @last}},{{/unless}}
        {{/each}}
    ) {
        bytes32[{{ slotsLength }}][] storage _{{ name.plural }};
        _{{ name.plural }}.length = _{{ name.lowerCamelCase }}DataSlot0.length;
        for (uint i = 0; i < _{{ name.lowerCamelCase }}DataSlot0.length; i++) {
            {{#each slots}}
            _{{ ../name.plural }}[i][{{ @index }}] = _{{ ../name.lowerCamelCase }}DataSlot{{ @index }}[i];
            {{/each}}
        }
        {{#each variables}}
        {{ name.lowerCamelCase }} = {{ ../name.Plural }}Coder.decode{{ ../name.UpperCamelCase }}{{ name.UpperCamelCase }}(_{{ ../name.plural }}[0]);
        {{/each}}
    }
}
