pragma solidity 0.4.24;

import "../../contracts/{{ name.Plural }}CoderContract.sol";


contract {{ name.Plural }}FunctionParametersScenario is {{ name.Plural }}CoderContract {
    {{#each variables}}
    {{ type }}[] private unknownLenght{{ name.UpperCamelCase }};
    {{/each}}

    function singleStruct(uint256{{#if slotsArray}}[{{ slotsLength }}]{{/if}} _{{ name.lowerCamelCase }}Data) public pure returns(
        {{#each variables}}
        {{ type }}{{#unless @last}},{{/unless}}
        {{/each}}
    ) {
        {{#each variables}}
        {{ type }} {{ name.lowerCamelCase }} = decode{{ ../name.UpperCamelCase }}{{ name.UpperCamelCase }}(_{{ ../name.lowerCamelCase }}Data);
        {{/each}}
        return (
            {{#each variables}}
            {{ name.lowerCamelCase }}{{#unless @last}},{{/unless}}
            {{/each}}
        );
    }

    function knownLengthStructArray(uint256{{#if slotsArray}}[{{ slotsLength }}]{{/if}}[10] _{{ name.lowerCamelCase }}Data) public pure returns(
        {{#each variables}}
        {{ type }}{{#unless @last}},{{/unless}}
        {{/each}}
    ) {
        {{#each variables}}
        {{ type }}[10] memory _{{ name.lowerCamelCase }};
        {{/each}}

        for (uint256 i = 0; i < 10; i++) {
            {{#each variables}}
            _{{ name.lowerCamelCase }}[i] = decode{{ ../name.UpperCamelCase }}{{ name.UpperCamelCase }}(_{{ ../name.lowerCamelCase }}Data[i]);
            {{/each}}
        }

        return (
            {{#each variables}}
            _{{ name.lowerCamelCase }}[0]{{#unless @last}},{{/unless}}
            {{/each}}
        );
    }

    function unknownLengthStructArray(
        {{#each slots}}
        uint256[] _{{ ../name.lowerCamelCase }}DataSlot{{ @index }}{{#unless @last}},{{/unless}}
        {{/each}}
    ) public returns(
        {{#each variables}}
        {{ type }}{{#unless @last}},{{/unless}}
        {{/each}}
    ) {
        uint256{{#if slotsArray}}[{{ slotsLength }}] memory{{/if}} _{{ name.lowerCamelCase }};

        {{#each variables}}
        unknownLenght{{ name.UpperCamelCase }}.length = _{{ ../name.lowerCamelCase }}DataSlot0.length;
        {{/each}}

        for (uint i = 0; i < _{{ name.lowerCamelCase }}DataSlot0.length; i++) {
            {{#each slots}}
            _{{ ../name.lowerCamelCase }}{{#if ../slotsArray}}[{{ @index }}]{{/if}} = _{{ ../name.lowerCamelCase }}DataSlot{{ @index }}[i];
            {{/each}}
            {{#each variables}}
            unknownLenght{{ name.UpperCamelCase }}[i] = decode{{ ../name.UpperCamelCase }}{{ name.UpperCamelCase }}(_{{ ../name.lowerCamelCase }});
            {{/each}}
        }

        return (
            {{#each variables}}
            unknownLenght{{ name.UpperCamelCase }}[0]{{#unless @last}},{{/unless}}
            {{/each}}
        );
    }
}
