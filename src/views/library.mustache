pragma solidity 0.4.24;


contract {{ name.UpperCamelCase }} {
    ////
    // Variable Declarations
    ////
    {{#each variables}}
    // As a {{ type }}, "{{ name.lowerCamelCase }}" will use {{ byte_length }} bytes.
    {{#unless isFirst}}
    uint256 private constant {{ ../name.CONSTANT }}_{{ name.CONSTANT }}_OFFSET = {{ offset }};
    {{/unless}}
    uint256 private constant {{ ../name.CONSTANT }}_{{ name.CONSTANT }}_MASK = {{ mask }};
    uint256 private constant {{ ../name.CONSTANT }}_{{ name.CONSTANT }}_NEGATIVE_MASK = {{ negative_mask }};

    {{/each}}
    // This variable will contain all of the data.
    bytes32[{{ slotsLength }}] public {{name.lowerCamelCase}}Data;

    ////
    // Setters
    ////
    {{#each variables}}
    function set{{ ../name.UpperCamelCase }}{{ name.UpperCamelCase }}({{ type }} _{{ name.lowerCamelCase }}) public {
    {{#if isBool}}
        if (_{{ name.lowerCamelCase }}) {
            {{ ../name.lowerCamelCase }}Data[{{ slot }}] = bytes32(
                (uint256({{ ../name.lowerCamelCase }}Data[{{ slot }}]) & {{ ../name.CONSTANT }}_{{ name.CONSTANT }}_NEGATIVE_MASK) | {{ ../name.CONSTANT }}_{{ name.CONSTANT }}_MASK
            );
        } else {
            {{ ../name.lowerCamelCase }}Data[{{ slot }}] = bytes32(uint256({{ ../name.lowerCamelCase }}Data[{{ slot }}]) & {{ ../name.CONSTANT }}_{{ name.CONSTANT }}_NEGATIVE_MASK);
        }
    {{else}}
        {{ ../name.lowerCamelCase }}Data[{{ slot }}] = bytes32(
            (uint256({{ ../name.lowerCamelCase }}Data[{{ slot }}]) & {{ ../name.CONSTANT }}_{{ name.CONSTANT }}_NEGATIVE_MASK) |
            ((uint256(_{{ name.lowerCamelCase }}){{#unless isFirst}} * {{ ../name.CONSTANT }}_{{ name.CONSTANT }}_OFFSET{{/unless}}) & {{ ../name.CONSTANT }}_{{ name.CONSTANT }}_MASK)
        );
    {{/if}}
    }

    {{/each}}
    function set{{ name.UpperCamelCase }}(
        {{#each variables}}
        {{ type }} _{{ name.lowerCamelCase }}{{#unless @last}},{{/unless}}
        {{/each}}
    ) public {
        {{#each slots}}
        set{{ ../name.UpperCamelCase }}DataSlot{{ @index }}(
            {{#each this}}
            _{{ name.lowerCamelCase }}{{#unless @last}},{{/unless}}
            {{/each}}
        );
        {{/each}}
    }

    {{#each slots}}
    function set{{ ../name.UpperCamelCase }}DataSlot{{ @index }}(
        {{#each this}}
        {{ type }} _{{ name.lowerCamelCase }}{{#unless @last}},{{/unless}}
        {{/each}}
    ) private {
        {{#each this}}
        {{#if isBool}}
        uint256 standard{{ name.UpperCamelCase }} = (_{{ name.lowerCamelCase }} ? {{ ../../name.CONSTANT }}_{{ name.CONSTANT }}_MASK : {{ ../../name.CONSTANT }}_{{ name.CONSTANT }}_NEGATIVE_MASK);
        {{else}}
        uint256 standard{{ name.UpperCamelCase }} = uint256(_{{ name.lowerCamelCase }});
        {{/if}}
        {{/each}}
        {{ ../name.lowerCamelCase }}Data[{{ @index }}] = bytes32(
            (uint256({{ ../name.lowerCamelCase }}Data[{{ @index }}]) & (
                {{#each this}}
                {{ ../../name.CONSTANT }}_{{ name.CONSTANT }}_NEGATIVE_MASK{{#unless @last}} |{{/unless}}
                {{/each}}
            )) |
            {{#each this}}
            (standard{{ name.UpperCamelCase }}{{#unless isFirst}} * {{ ../../name.CONSTANT }}_{{ name.CONSTANT }}_OFFSET{{/unless}}) & {{ ../../name.CONSTANT }}_{{ name.CONSTANT }}_MASK{{#unless @last}} |{{/unless}}
            {{/each}}
        );
    }
    {{/each}}

    ////
    // Getters
    ////
    {{#each variables}}
    function get{{ ../name.UpperCamelCase }}{{ name.UpperCamelCase }}() public view returns({{ type }}) {
        {{#if isBool}}
        return (uint256({{ ../name.lowerCamelCase }}Data[{{ slot }}]) & {{ ../name.CONSTANT }}_{{ name.CONSTANT }}_MASK) != 0x0;
        {{else}}
        return {{type}}((uint256({{ ../name.lowerCamelCase }}Data[{{ slot }}]) & {{ ../name.CONSTANT }}_{{ name.CONSTANT }}_MASK){{#unless isFirst}} / {{ ../name.CONSTANT }}_{{ name.CONSTANT }}_OFFSET{{/unless}});
        {{/if}}
    }

    {{/each}}
    function get{{ name.UpperCamelCase }}() public view returns(
        {{#each variables}}
        {{ type }} {{ name.lowerCamelCase }}{{#unless @last}},{{/unless}}
        {{/each}}
    ) {
        {{#each variables}}
        {{ name.lowerCamelCase }} = get{{ ../name.UpperCamelCase }}{{ name.UpperCamelCase }}();
        {{/each}}
    }
}
